//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:/Users/marciohenrique/Downloads/uenp/TF_Compiladores-main/BasicC.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419


  namespace BasicInt.Grammar;

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class BasicCParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, DEFINE=2, INCLUDE=3, MAIN=4, DO=5, WHILE=6, FOR=7, RETURN=8, IMPORT=9, 
		STRUCT=10, UNION=11, TYPEOF=12, IF=13, ELSE=14, SWITCH=15, CASE=16, BREAK=17, 
		DEFAULT=18, EOL=19, PRINTF=20, SCANF=21, SCANF_FORMAT=22, AMPERSAND=23, 
		GETS=24, PUTS=25, INTEGER=26, DOUBLE=27, BOOLEAN=28, STRING=29, VOID=30, 
		SUM=31, SUB=32, DIV=33, MULT=34, MOD=35, ASSIGN=36, SEP=37, LP=38, RP=39, 
		LB=40, RB=41, LE=42, LT=43, GT=44, GE=45, EQ=46, NE=47, AND=48, OR=49, 
		NOT=50, NUMD=51, BOOL=52, NUM=53, VAR=54, STR=55, COMMENT=56, COMMENT_BLOCK=57, 
		WS=58;
	public const int
		RULE_prog = 0, RULE_preprocessor = 1, RULE_mainFunction = 2, RULE_function = 3, 
		RULE_line = 4, RULE_atrib = 5, RULE_input = 6, RULE_output = 7, RULE_expr = 8, 
		RULE_term = 9, RULE_factor = 10, RULE_controlflow = 11, RULE_loop = 12, 
		RULE_block = 13, RULE_rblock = 14, RULE_rbody = 15, RULE_bexpr = 16, RULE_params = 17, 
		RULE_paramsCall = 18, RULE_callFunction = 19;
	public static readonly string[] ruleNames = {
		"prog", "preprocessor", "mainFunction", "function", "line", "atrib", "input", 
		"output", "expr", "term", "factor", "controlflow", "loop", "block", "rblock", 
		"rbody", "bexpr", "params", "paramsCall", "callFunction"
	};

	private static readonly string[] _LiteralNames = {
		null, "'<stdio.h>'", "'#define'", "'#include'", "'main'", "'do'", "'while'", 
		"'for'", "'return'", "'#import'", "'struct'", "'union'", "'typeof'", "'if'", 
		"'else'", "'switch'", "'case'", "'break'", "'default'", "';'", "'printf'", 
		"'scanf'", null, "'&'", "'gets'", "'puts'", "'int'", "'double'", "'bool'", 
		"'str'", "'void'", "'+'", "'-'", "'/'", "'*'", "'%'", "'='", "','", "'('", 
		"')'", "'{'", "'}'", "'<='", "'<'", "'>'", "'>='", "'=='", "'!='", "'&&'", 
		"'||'", "'!'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, "DEFINE", "INCLUDE", "MAIN", "DO", "WHILE", "FOR", "RETURN", 
		"IMPORT", "STRUCT", "UNION", "TYPEOF", "IF", "ELSE", "SWITCH", "CASE", 
		"BREAK", "DEFAULT", "EOL", "PRINTF", "SCANF", "SCANF_FORMAT", "AMPERSAND", 
		"GETS", "PUTS", "INTEGER", "DOUBLE", "BOOLEAN", "STRING", "VOID", "SUM", 
		"SUB", "DIV", "MULT", "MOD", "ASSIGN", "SEP", "LP", "RP", "LB", "RB", 
		"LE", "LT", "GT", "GE", "EQ", "NE", "AND", "OR", "NOT", "NUMD", "BOOL", 
		"NUM", "VAR", "STR", "COMMENT", "COMMENT_BLOCK", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "BasicC.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static BasicCParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public BasicCParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public BasicCParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCLUDE() { return GetToken(BasicCParser.INCLUDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MainFunctionContext mainFunction() {
			return GetRuleContext<MainFunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PreprocessorContext[] preprocessor() {
			return GetRuleContexts<PreprocessorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PreprocessorContext preprocessor(int i) {
			return GetRuleContext<PreprocessorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionContext[] function() {
			return GetRuleContexts<FunctionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionContext function(int i) {
			return GetRuleContext<FunctionContext>(i);
		}
		public ProgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prog; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.EnterProg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.ExitProg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicCVisitor<TResult> typedVisitor = visitor as IBasicCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgContext prog() {
		ProgContext _localctx = new ProgContext(Context, State);
		EnterRule(_localctx, 0, RULE_prog);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 40;
			Match(INCLUDE);
			State = 41;
			Match(T__0);
			State = 45;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DEFINE || _la==INCLUDE) {
				{
				{
				State = 42;
				preprocessor();
				}
				}
				State = 47;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 51;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 48;
					function();
					}
					} 
				}
				State = 53;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			}
			State = 54;
			mainFunction();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PreprocessorContext : ParserRuleContext {
		public PreprocessorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preprocessor; } }
	 
		public PreprocessorContext() { }
		public virtual void CopyFrom(PreprocessorContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DefineDirectiveContext : PreprocessorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFINE() { return GetToken(BasicCParser.DEFINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(BasicCParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public DefineDirectiveContext(PreprocessorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.EnterDefineDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.ExitDefineDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicCVisitor<TResult> typedVisitor = visitor as IBasicCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefineDirective(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IncludeDirectiveContext : PreprocessorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCLUDE() { return GetToken(BasicCParser.INCLUDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(BasicCParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(BasicCParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(BasicCParser.GT, 0); }
		public IncludeDirectiveContext(PreprocessorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.EnterIncludeDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.ExitIncludeDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicCVisitor<TResult> typedVisitor = visitor as IBasicCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIncludeDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PreprocessorContext preprocessor() {
		PreprocessorContext _localctx = new PreprocessorContext(Context, State);
		EnterRule(_localctx, 2, RULE_preprocessor);
		try {
			State = 63;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INCLUDE:
				_localctx = new IncludeDirectiveContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 56;
				Match(INCLUDE);
				State = 57;
				Match(LT);
				State = 58;
				Match(VAR);
				State = 59;
				Match(GT);
				}
				break;
			case DEFINE:
				_localctx = new DefineDirectiveContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 60;
				Match(DEFINE);
				State = 61;
				Match(VAR);
				State = 62;
				expr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MainFunctionContext : ParserRuleContext {
		public MainFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mainFunction; } }
	 
		public MainFunctionContext() { }
		public virtual void CopyFrom(MainFunctionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class MainFunctionBlockContext : MainFunctionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(BasicCParser.INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAIN() { return GetToken(BasicCParser.MAIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LP() { return GetToken(BasicCParser.LP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RP() { return GetToken(BasicCParser.RP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RblockContext rblock() {
			return GetRuleContext<RblockContext>(0);
		}
		public MainFunctionBlockContext(MainFunctionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.EnterMainFunctionBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.ExitMainFunctionBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicCVisitor<TResult> typedVisitor = visitor as IBasicCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMainFunctionBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MainFunctionContext mainFunction() {
		MainFunctionContext _localctx = new MainFunctionContext(Context, State);
		EnterRule(_localctx, 4, RULE_mainFunction);
		try {
			_localctx = new MainFunctionBlockContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 65;
			Match(INTEGER);
			State = 66;
			Match(MAIN);
			State = 67;
			Match(LP);
			State = 68;
			Match(RP);
			State = 69;
			rblock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionContext : ParserRuleContext {
		public FunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function; } }
	 
		public FunctionContext() { }
		public virtual void CopyFrom(FunctionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FnWithReturnContext : FunctionContext {
		public IToken TYPE;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(BasicCParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LP() { return GetToken(BasicCParser.LP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParamsContext @params() {
			return GetRuleContext<ParamsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RP() { return GetToken(BasicCParser.RP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RblockContext rblock() {
			return GetRuleContext<RblockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(BasicCParser.INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE() { return GetToken(BasicCParser.DOUBLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEAN() { return GetToken(BasicCParser.BOOLEAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(BasicCParser.STRING, 0); }
		public FnWithReturnContext(FunctionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.EnterFnWithReturn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.ExitFnWithReturn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicCVisitor<TResult> typedVisitor = visitor as IBasicCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFnWithReturn(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FnWithoutReturnContext : FunctionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOID() { return GetToken(BasicCParser.VOID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(BasicCParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LP() { return GetToken(BasicCParser.LP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParamsContext @params() {
			return GetRuleContext<ParamsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RP() { return GetToken(BasicCParser.RP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RblockContext rblock() {
			return GetRuleContext<RblockContext>(0);
		}
		public FnWithoutReturnContext(FunctionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.EnterFnWithoutReturn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.ExitFnWithoutReturn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicCVisitor<TResult> typedVisitor = visitor as IBasicCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFnWithoutReturn(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionContext function() {
		FunctionContext _localctx = new FunctionContext(Context, State);
		EnterRule(_localctx, 6, RULE_function);
		int _la;
		try {
			State = 85;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INTEGER:
			case DOUBLE:
			case BOOLEAN:
			case STRING:
				_localctx = new FnWithReturnContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 71;
				((FnWithReturnContext)_localctx).TYPE = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 1006632960L) != 0)) ) {
					((FnWithReturnContext)_localctx).TYPE = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 72;
				Match(VAR);
				State = 73;
				Match(LP);
				State = 74;
				@params();
				State = 75;
				Match(RP);
				State = 76;
				rblock();
				}
				break;
			case VOID:
				_localctx = new FnWithoutReturnContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 78;
				Match(VOID);
				State = 79;
				Match(VAR);
				State = 80;
				Match(LP);
				State = 81;
				@params();
				State = 82;
				Match(RP);
				State = 83;
				rblock();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AtribContext atrib() {
			return GetRuleContext<AtribContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL() { return GetToken(BasicCParser.EOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InputContext input() {
			return GetRuleContext<InputContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OutputContext output() {
			return GetRuleContext<OutputContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ControlflowContext controlflow() {
			return GetRuleContext<ControlflowContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoopContext loop() {
			return GetRuleContext<LoopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionContext function() {
			return GetRuleContext<FunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CallFunctionContext callFunction() {
			return GetRuleContext<CallFunctionContext>(0);
		}
		public LineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_line; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.EnterLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.ExitLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicCVisitor<TResult> typedVisitor = visitor as IBasicCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineContext line() {
		LineContext _localctx = new LineContext(Context, State);
		EnterRule(_localctx, 8, RULE_line);
		try {
			State = 102;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 87;
				atrib();
				State = 88;
				Match(EOL);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 90;
				input();
				State = 91;
				Match(EOL);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 93;
				output();
				State = 94;
				Match(EOL);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 96;
				controlflow();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 97;
				loop();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 98;
				function();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 99;
				callFunction();
				State = 100;
				Match(EOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtribContext : ParserRuleContext {
		public AtribContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atrib; } }
	 
		public AtribContext() { }
		public virtual void CopyFrom(AtribContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class VariavelNovaFuncaoContext : AtribContext {
		public IToken TYPE;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(BasicCParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(BasicCParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CallFunctionContext callFunction() {
			return GetRuleContext<CallFunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(BasicCParser.INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE() { return GetToken(BasicCParser.DOUBLE, 0); }
		public VariavelNovaFuncaoContext(AtribContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.EnterVariavelNovaFuncao(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.ExitVariavelNovaFuncao(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicCVisitor<TResult> typedVisitor = visitor as IBasicCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariavelNovaFuncao(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VariavelExistenteBooleanContext : AtribContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(BasicCParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(BasicCParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(BasicCParser.BOOL, 0); }
		public VariavelExistenteBooleanContext(AtribContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.EnterVariavelExistenteBoolean(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.ExitVariavelExistenteBoolean(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicCVisitor<TResult> typedVisitor = visitor as IBasicCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariavelExistenteBoolean(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VariavelNovaContext : AtribContext {
		public IToken TYPE;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(BasicCParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(BasicCParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(BasicCParser.INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE() { return GetToken(BasicCParser.DOUBLE, 0); }
		public VariavelNovaContext(AtribContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.EnterVariavelNova(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.ExitVariavelNova(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicCVisitor<TResult> typedVisitor = visitor as IBasicCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariavelNova(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VariavelExistenteStringContext : AtribContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(BasicCParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(BasicCParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STR() { return GetToken(BasicCParser.STR, 0); }
		public VariavelExistenteStringContext(AtribContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.EnterVariavelExistenteString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.ExitVariavelExistenteString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicCVisitor<TResult> typedVisitor = visitor as IBasicCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariavelExistenteString(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VariavelNovaStringContext : AtribContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(BasicCParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(BasicCParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(BasicCParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STR() { return GetToken(BasicCParser.STR, 0); }
		public VariavelNovaStringContext(AtribContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.EnterVariavelNovaString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.ExitVariavelNovaString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicCVisitor<TResult> typedVisitor = visitor as IBasicCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariavelNovaString(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VariavelNovaBooleanContext : AtribContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEAN() { return GetToken(BasicCParser.BOOLEAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(BasicCParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(BasicCParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(BasicCParser.BOOL, 0); }
		public VariavelNovaBooleanContext(AtribContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.EnterVariavelNovaBoolean(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.ExitVariavelNovaBoolean(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicCVisitor<TResult> typedVisitor = visitor as IBasicCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariavelNovaBoolean(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VariavelExistenteContext : AtribContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(BasicCParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(BasicCParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public VariavelExistenteContext(AtribContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.EnterVariavelExistente(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.ExitVariavelExistente(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicCVisitor<TResult> typedVisitor = visitor as IBasicCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariavelExistente(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtribContext atrib() {
		AtribContext _localctx = new AtribContext(Context, State);
		EnterRule(_localctx, 10, RULE_atrib);
		int _la;
		try {
			State = 129;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				_localctx = new VariavelExistenteStringContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 104;
				Match(VAR);
				State = 105;
				Match(ASSIGN);
				State = 106;
				Match(STR);
				}
				break;
			case 2:
				_localctx = new VariavelNovaStringContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 107;
				Match(STRING);
				State = 108;
				Match(VAR);
				State = 109;
				Match(ASSIGN);
				State = 110;
				Match(STR);
				}
				break;
			case 3:
				_localctx = new VariavelNovaContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 111;
				((VariavelNovaContext)_localctx).TYPE = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==INTEGER || _la==DOUBLE) ) {
					((VariavelNovaContext)_localctx).TYPE = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 112;
				Match(VAR);
				State = 113;
				Match(ASSIGN);
				State = 114;
				expr();
				}
				break;
			case 4:
				_localctx = new VariavelNovaFuncaoContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 115;
				((VariavelNovaFuncaoContext)_localctx).TYPE = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==INTEGER || _la==DOUBLE) ) {
					((VariavelNovaFuncaoContext)_localctx).TYPE = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 116;
				Match(VAR);
				State = 117;
				Match(ASSIGN);
				State = 118;
				callFunction();
				}
				break;
			case 5:
				_localctx = new VariavelNovaBooleanContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 119;
				Match(BOOLEAN);
				State = 120;
				Match(VAR);
				State = 121;
				Match(ASSIGN);
				State = 122;
				Match(BOOL);
				}
				break;
			case 6:
				_localctx = new VariavelExistenteContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 123;
				Match(VAR);
				State = 124;
				Match(ASSIGN);
				State = 125;
				expr();
				}
				break;
			case 7:
				_localctx = new VariavelExistenteBooleanContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 126;
				Match(VAR);
				State = 127;
				Match(ASSIGN);
				State = 128;
				Match(BOOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InputContext : ParserRuleContext {
		public InputContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_input; } }
	 
		public InputContext() { }
		public virtual void CopyFrom(InputContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class InputVarContext : InputContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCANF() { return GetToken(BasicCParser.SCANF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LP() { return GetToken(BasicCParser.LP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCANF_FORMAT() { return GetToken(BasicCParser.SCANF_FORMAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEP() { return GetToken(BasicCParser.SEP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AMPERSAND() { return GetToken(BasicCParser.AMPERSAND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(BasicCParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RP() { return GetToken(BasicCParser.RP, 0); }
		public InputVarContext(InputContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.EnterInputVar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.ExitInputVar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicCVisitor<TResult> typedVisitor = visitor as IBasicCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInputVar(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InputStrContext : InputContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GETS() { return GetToken(BasicCParser.GETS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LP() { return GetToken(BasicCParser.LP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(BasicCParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RP() { return GetToken(BasicCParser.RP, 0); }
		public InputStrContext(InputContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.EnterInputStr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.ExitInputStr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicCVisitor<TResult> typedVisitor = visitor as IBasicCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInputStr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InputContext input() {
		InputContext _localctx = new InputContext(Context, State);
		EnterRule(_localctx, 12, RULE_input);
		try {
			State = 142;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SCANF:
				_localctx = new InputVarContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 131;
				Match(SCANF);
				State = 132;
				Match(LP);
				State = 133;
				Match(SCANF_FORMAT);
				State = 134;
				Match(SEP);
				State = 135;
				Match(AMPERSAND);
				State = 136;
				Match(VAR);
				State = 137;
				Match(RP);
				}
				break;
			case GETS:
				_localctx = new InputStrContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 138;
				Match(GETS);
				State = 139;
				Match(LP);
				State = 140;
				Match(VAR);
				State = 141;
				Match(RP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OutputContext : ParserRuleContext {
		public OutputContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_output; } }
	 
		public OutputContext() { }
		public virtual void CopyFrom(OutputContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class OutputStrLineContext : OutputContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUTS() { return GetToken(BasicCParser.PUTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LP() { return GetToken(BasicCParser.LP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(BasicCParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RP() { return GetToken(BasicCParser.RP, 0); }
		public OutputStrLineContext(OutputContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.EnterOutputStrLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.ExitOutputStrLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicCVisitor<TResult> typedVisitor = visitor as IBasicCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOutputStrLine(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OutputVarContext : OutputContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRINTF() { return GetToken(BasicCParser.PRINTF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LP() { return GetToken(BasicCParser.LP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(BasicCParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RP() { return GetToken(BasicCParser.RP, 0); }
		public OutputVarContext(OutputContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.EnterOutputVar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.ExitOutputVar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicCVisitor<TResult> typedVisitor = visitor as IBasicCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOutputVar(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OutputExprContext : OutputContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRINTF() { return GetToken(BasicCParser.PRINTF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LP() { return GetToken(BasicCParser.LP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RP() { return GetToken(BasicCParser.RP, 0); }
		public OutputExprContext(OutputContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.EnterOutputExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.ExitOutputExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicCVisitor<TResult> typedVisitor = visitor as IBasicCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOutputExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OutputStrVarContext : OutputContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRINTF() { return GetToken(BasicCParser.PRINTF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LP() { return GetToken(BasicCParser.LP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STR() { return GetToken(BasicCParser.STR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RP() { return GetToken(BasicCParser.RP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEP() { return GetTokens(BasicCParser.SEP); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEP(int i) {
			return GetToken(BasicCParser.SEP, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VAR() { return GetTokens(BasicCParser.VAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR(int i) {
			return GetToken(BasicCParser.VAR, i);
		}
		public OutputStrVarContext(OutputContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.EnterOutputStrVar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.ExitOutputStrVar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicCVisitor<TResult> typedVisitor = visitor as IBasicCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOutputStrVar(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OutputStrContext : OutputContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRINTF() { return GetToken(BasicCParser.PRINTF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LP() { return GetToken(BasicCParser.LP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STR() { return GetToken(BasicCParser.STR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RP() { return GetToken(BasicCParser.RP, 0); }
		public OutputStrContext(OutputContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.EnterOutputStr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.ExitOutputStr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicCVisitor<TResult> typedVisitor = visitor as IBasicCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOutputStr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OutputContext output() {
		OutputContext _localctx = new OutputContext(Context, State);
		EnterRule(_localctx, 14, RULE_output);
		int _la;
		try {
			State = 171;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				_localctx = new OutputStrContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 144;
				Match(PRINTF);
				State = 145;
				Match(LP);
				State = 146;
				Match(STR);
				State = 147;
				Match(RP);
				}
				break;
			case 2:
				_localctx = new OutputVarContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 148;
				Match(PRINTF);
				State = 149;
				Match(LP);
				State = 150;
				Match(VAR);
				State = 151;
				Match(RP);
				}
				break;
			case 3:
				_localctx = new OutputExprContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 152;
				Match(PRINTF);
				State = 153;
				Match(LP);
				State = 154;
				expr();
				State = 155;
				Match(RP);
				}
				break;
			case 4:
				_localctx = new OutputStrVarContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 157;
				Match(PRINTF);
				State = 158;
				Match(LP);
				State = 159;
				Match(STR);
				State = 162;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 160;
					Match(SEP);
					State = 161;
					Match(VAR);
					}
					}
					State = 164;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==SEP );
				State = 166;
				Match(RP);
				}
				break;
			case 5:
				_localctx = new OutputStrLineContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 167;
				Match(PUTS);
				State = 168;
				Match(LP);
				State = 169;
				Match(VAR);
				State = 170;
				Match(RP);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ExprSubContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUB() { return GetToken(BasicCParser.SUB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ExprSubContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.EnterExprSub(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.ExitExprSub(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicCVisitor<TResult> typedVisitor = visitor as IBasicCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprSub(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprSumContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUM() { return GetToken(BasicCParser.SUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ExprSumContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.EnterExprSum(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.ExitExprSum(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicCVisitor<TResult> typedVisitor = visitor as IBasicCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprSum(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprTermContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public ExprTermContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.EnterExprTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.ExitExprTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicCVisitor<TResult> typedVisitor = visitor as IBasicCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		ExprContext _localctx = new ExprContext(Context, State);
		EnterRule(_localctx, 16, RULE_expr);
		try {
			State = 182;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				_localctx = new ExprSumContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 173;
				term();
				State = 174;
				Match(SUM);
				State = 175;
				expr();
				}
				break;
			case 2:
				_localctx = new ExprSubContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 177;
				term();
				State = 178;
				Match(SUB);
				State = 179;
				expr();
				}
				break;
			case 3:
				_localctx = new ExprTermContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 181;
				term();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
	 
		public TermContext() { }
		public virtual void CopyFrom(TermContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TermDivContext : TermContext {
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(BasicCParser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public TermDivContext(TermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.EnterTermDiv(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.ExitTermDiv(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicCVisitor<TResult> typedVisitor = visitor as IBasicCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTermDiv(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TermModContext : TermContext {
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD() { return GetToken(BasicCParser.MOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public TermModContext(TermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.EnterTermMod(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.ExitTermMod(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicCVisitor<TResult> typedVisitor = visitor as IBasicCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTermMod(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TermMultContext : TermContext {
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULT() { return GetToken(BasicCParser.MULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public TermMultContext(TermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.EnterTermMult(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.ExitTermMult(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicCVisitor<TResult> typedVisitor = visitor as IBasicCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTermMult(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TermFactorContext : TermContext {
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		public TermFactorContext(TermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.EnterTermFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.ExitTermFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicCVisitor<TResult> typedVisitor = visitor as IBasicCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTermFactor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(Context, State);
		EnterRule(_localctx, 18, RULE_term);
		try {
			State = 197;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				_localctx = new TermMultContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 184;
				factor();
				State = 185;
				Match(MULT);
				State = 186;
				term();
				}
				break;
			case 2:
				_localctx = new TermDivContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 188;
				factor();
				State = 189;
				Match(DIV);
				State = 190;
				term();
				}
				break;
			case 3:
				_localctx = new TermModContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 192;
				factor();
				State = 193;
				Match(MOD);
				State = 194;
				term();
				}
				break;
			case 4:
				_localctx = new TermFactorContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 196;
				factor();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FactorContext : ParserRuleContext {
		public FactorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factor; } }
	 
		public FactorContext() { }
		public virtual void CopyFrom(FactorContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FactorNumDContext : FactorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMD() { return GetToken(BasicCParser.NUMD, 0); }
		public FactorNumDContext(FactorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.EnterFactorNumD(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.ExitFactorNumD(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicCVisitor<TResult> typedVisitor = visitor as IBasicCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFactorNumD(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FactorStrContext : FactorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STR() { return GetToken(BasicCParser.STR, 0); }
		public FactorStrContext(FactorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.EnterFactorStr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.ExitFactorStr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicCVisitor<TResult> typedVisitor = visitor as IBasicCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFactorStr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FactorNumContext : FactorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUM() { return GetToken(BasicCParser.NUM, 0); }
		public FactorNumContext(FactorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.EnterFactorNum(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.ExitFactorNum(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicCVisitor<TResult> typedVisitor = visitor as IBasicCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFactorNum(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FactorVarContext : FactorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(BasicCParser.VAR, 0); }
		public FactorVarContext(FactorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.EnterFactorVar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.ExitFactorVar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicCVisitor<TResult> typedVisitor = visitor as IBasicCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFactorVar(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FactorExprContext : FactorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LP() { return GetToken(BasicCParser.LP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RP() { return GetToken(BasicCParser.RP, 0); }
		public FactorExprContext(FactorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.EnterFactorExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.ExitFactorExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicCVisitor<TResult> typedVisitor = visitor as IBasicCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFactorExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FactorContext factor() {
		FactorContext _localctx = new FactorContext(Context, State);
		EnterRule(_localctx, 20, RULE_factor);
		try {
			State = 207;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LP:
				_localctx = new FactorExprContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 199;
				Match(LP);
				State = 200;
				expr();
				State = 201;
				Match(RP);
				}
				break;
			case VAR:
				_localctx = new FactorVarContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 203;
				Match(VAR);
				}
				break;
			case NUMD:
				_localctx = new FactorNumDContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 204;
				Match(NUMD);
				}
				break;
			case NUM:
				_localctx = new FactorNumContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 205;
				Match(NUM);
				}
				break;
			case STR:
				_localctx = new FactorStrContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 206;
				Match(STR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ControlflowContext : ParserRuleContext {
		public ControlflowContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_controlflow; } }
	 
		public ControlflowContext() { }
		public virtual void CopyFrom(ControlflowContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IfBlockContext : ControlflowContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BasicCParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LP() { return GetToken(BasicCParser.LP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BexprContext bexpr() {
			return GetRuleContext<BexprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RP() { return GetToken(BasicCParser.RP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public IfBlockContext(ControlflowContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.EnterIfBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.ExitIfBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicCVisitor<TResult> typedVisitor = visitor as IBasicCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfBlock(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfElseBlockContext : ControlflowContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BasicCParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LP() { return GetToken(BasicCParser.LP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BexprContext bexpr() {
			return GetRuleContext<BexprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RP() { return GetToken(BasicCParser.RP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(BasicCParser.ELSE, 0); }
		public IfElseBlockContext(ControlflowContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.EnterIfElseBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.ExitIfElseBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicCVisitor<TResult> typedVisitor = visitor as IBasicCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfElseBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ControlflowContext controlflow() {
		ControlflowContext _localctx = new ControlflowContext(Context, State);
		EnterRule(_localctx, 22, RULE_controlflow);
		try {
			State = 223;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				_localctx = new IfBlockContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 209;
				Match(IF);
				State = 210;
				Match(LP);
				State = 211;
				bexpr(0);
				State = 212;
				Match(RP);
				State = 213;
				block();
				}
				break;
			case 2:
				_localctx = new IfElseBlockContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 215;
				Match(IF);
				State = 216;
				Match(LP);
				State = 217;
				bexpr(0);
				State = 218;
				Match(RP);
				State = 219;
				block();
				State = 220;
				Match(ELSE);
				State = 221;
				block();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopContext : ParserRuleContext {
		public LoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loop; } }
	 
		public LoopContext() { }
		public virtual void CopyFrom(LoopContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ForLoopBlockContext : LoopContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(BasicCParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LP() { return GetToken(BasicCParser.LP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AtribContext[] atrib() {
			return GetRuleContexts<AtribContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AtribContext atrib(int i) {
			return GetRuleContext<AtribContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(BasicCParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(BasicCParser.EOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BexprContext bexpr() {
			return GetRuleContext<BexprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RP() { return GetToken(BasicCParser.RP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ForLoopBlockContext(LoopContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.EnterForLoopBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.ExitForLoopBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicCVisitor<TResult> typedVisitor = visitor as IBasicCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForLoopBlock(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LoopBlockContext : LoopContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(BasicCParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LP() { return GetToken(BasicCParser.LP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BexprContext bexpr() {
			return GetRuleContext<BexprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RP() { return GetToken(BasicCParser.RP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public LoopBlockContext(LoopContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.EnterLoopBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.ExitLoopBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicCVisitor<TResult> typedVisitor = visitor as IBasicCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopBlock(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DoWhileBlockContext : LoopContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(BasicCParser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(BasicCParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LP() { return GetToken(BasicCParser.LP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BexprContext bexpr() {
			return GetRuleContext<BexprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RP() { return GetToken(BasicCParser.RP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL() { return GetToken(BasicCParser.EOL, 0); }
		public DoWhileBlockContext(LoopContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.EnterDoWhileBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.ExitDoWhileBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicCVisitor<TResult> typedVisitor = visitor as IBasicCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoWhileBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopContext loop() {
		LoopContext _localctx = new LoopContext(Context, State);
		EnterRule(_localctx, 24, RULE_loop);
		try {
			State = 249;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case WHILE:
				_localctx = new LoopBlockContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 225;
				Match(WHILE);
				State = 226;
				Match(LP);
				State = 227;
				bexpr(0);
				State = 228;
				Match(RP);
				State = 229;
				block();
				}
				break;
			case FOR:
				_localctx = new ForLoopBlockContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 231;
				Match(FOR);
				State = 232;
				Match(LP);
				State = 233;
				atrib();
				State = 234;
				Match(EOL);
				State = 235;
				bexpr(0);
				State = 236;
				Match(EOL);
				State = 237;
				atrib();
				State = 238;
				Match(RP);
				State = 239;
				block();
				}
				break;
			case DO:
				_localctx = new DoWhileBlockContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 241;
				Match(DO);
				State = 242;
				block();
				State = 243;
				Match(WHILE);
				State = 244;
				Match(LP);
				State = 245;
				bexpr(0);
				State = 246;
				Match(RP);
				State = 247;
				Match(EOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
	 
		public BlockContext() { }
		public virtual void CopyFrom(BlockContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BlockLineContext : BlockContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LB() { return GetToken(BasicCParser.LB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RB() { return GetToken(BasicCParser.RB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public BlockLineContext(BlockContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.EnterBlockLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.ExitBlockLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicCVisitor<TResult> typedVisitor = visitor as IBasicCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 26, RULE_block);
		int _la;
		try {
			_localctx = new BlockLineContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 251;
			Match(LB);
			State = 253;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 252;
				line();
				}
				}
				State = 255;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 18014400643342560L) != 0) );
			State = 257;
			Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RblockContext : ParserRuleContext {
		public RblockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rblock; } }
	 
		public RblockContext() { }
		public virtual void CopyFrom(RblockContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FnBlockLineContext : RblockContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LB() { return GetToken(BasicCParser.LB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RbodyContext rbody() {
			return GetRuleContext<RbodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RB() { return GetToken(BasicCParser.RB, 0); }
		public FnBlockLineContext(RblockContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.EnterFnBlockLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.ExitFnBlockLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicCVisitor<TResult> typedVisitor = visitor as IBasicCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFnBlockLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RblockContext rblock() {
		RblockContext _localctx = new RblockContext(Context, State);
		EnterRule(_localctx, 28, RULE_rblock);
		try {
			_localctx = new FnBlockLineContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 259;
			Match(LB);
			State = 260;
			rbody();
			State = 261;
			Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RbodyContext : ParserRuleContext {
		public RbodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rbody; } }
	 
		public RbodyContext() { }
		public virtual void CopyFrom(RbodyContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FnReturnBoolLineContext : RbodyContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(BasicCParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(BasicCParser.BOOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL() { return GetToken(BasicCParser.EOL, 0); }
		public FnReturnBoolLineContext(RbodyContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.EnterFnReturnBoolLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.ExitFnReturnBoolLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicCVisitor<TResult> typedVisitor = visitor as IBasicCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFnReturnBoolLine(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FnReturnLineContext : RbodyContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(BasicCParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL() { return GetToken(BasicCParser.EOL, 0); }
		public FnReturnLineContext(RbodyContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.EnterFnReturnLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.ExitFnReturnLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicCVisitor<TResult> typedVisitor = visitor as IBasicCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFnReturnLine(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FnBodyLineContext : RbodyContext {
		[System.Diagnostics.DebuggerNonUserCode] public LineContext line() {
			return GetRuleContext<LineContext>(0);
		}
		public FnBodyLineContext(RbodyContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.EnterFnBodyLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.ExitFnBodyLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicCVisitor<TResult> typedVisitor = visitor as IBasicCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFnBodyLine(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FnReturnStrLineContext : RbodyContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(BasicCParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STR() { return GetToken(BasicCParser.STR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL() { return GetToken(BasicCParser.EOL, 0); }
		public FnReturnStrLineContext(RbodyContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.EnterFnReturnStrLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.ExitFnReturnStrLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicCVisitor<TResult> typedVisitor = visitor as IBasicCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFnReturnStrLine(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FnReturnExprLineContext : RbodyContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(BasicCParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL() { return GetToken(BasicCParser.EOL, 0); }
		public FnReturnExprLineContext(RbodyContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.EnterFnReturnExprLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.ExitFnReturnExprLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicCVisitor<TResult> typedVisitor = visitor as IBasicCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFnReturnExprLine(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FnBodyLineMoreContext : RbodyContext {
		[System.Diagnostics.DebuggerNonUserCode] public LineContext line() {
			return GetRuleContext<LineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RbodyContext rbody() {
			return GetRuleContext<RbodyContext>(0);
		}
		public FnBodyLineMoreContext(RbodyContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.EnterFnBodyLineMore(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.ExitFnBodyLineMore(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicCVisitor<TResult> typedVisitor = visitor as IBasicCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFnBodyLineMore(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RbodyContext rbody() {
		RbodyContext _localctx = new RbodyContext(Context, State);
		EnterRule(_localctx, 30, RULE_rbody);
		try {
			State = 279;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				_localctx = new FnBodyLineContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 263;
				line();
				}
				break;
			case 2:
				_localctx = new FnBodyLineMoreContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 264;
				line();
				State = 265;
				rbody();
				}
				break;
			case 3:
				_localctx = new FnReturnBoolLineContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 267;
				Match(RETURN);
				State = 268;
				Match(BOOL);
				State = 269;
				Match(EOL);
				}
				break;
			case 4:
				_localctx = new FnReturnStrLineContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 270;
				Match(RETURN);
				State = 271;
				Match(STR);
				State = 272;
				Match(EOL);
				}
				break;
			case 5:
				_localctx = new FnReturnExprLineContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 273;
				Match(RETURN);
				State = 274;
				expr();
				State = 275;
				Match(EOL);
				}
				break;
			case 6:
				_localctx = new FnReturnLineContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 277;
				Match(RETURN);
				State = 278;
				Match(EOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BexprContext : ParserRuleContext {
		public BexprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bexpr; } }
	 
		public BexprContext() { }
		public virtual void CopyFrom(BexprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BexprNotContext : BexprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(BasicCParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BexprContext bexpr() {
			return GetRuleContext<BexprContext>(0);
		}
		public BexprNotContext(BexprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.EnterBexprNot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.ExitBexprNot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicCVisitor<TResult> typedVisitor = visitor as IBasicCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBexprNot(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BexprOrContext : BexprContext {
		[System.Diagnostics.DebuggerNonUserCode] public BexprContext[] bexpr() {
			return GetRuleContexts<BexprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BexprContext bexpr(int i) {
			return GetRuleContext<BexprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(BasicCParser.OR, 0); }
		public BexprOrContext(BexprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.EnterBexprOr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.ExitBexprOr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicCVisitor<TResult> typedVisitor = visitor as IBasicCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBexprOr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BexprExprContext : BexprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public BexprExprContext(BexprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.EnterBexprExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.ExitBexprExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicCVisitor<TResult> typedVisitor = visitor as IBasicCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBexprExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BexprRelopContext : BexprContext {
		public IToken RELOP;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(BasicCParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NE() { return GetToken(BasicCParser.NE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(BasicCParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(BasicCParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LE() { return GetToken(BasicCParser.LE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GE() { return GetToken(BasicCParser.GE, 0); }
		public BexprRelopContext(BexprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.EnterBexprRelop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.ExitBexprRelop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicCVisitor<TResult> typedVisitor = visitor as IBasicCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBexprRelop(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BexprAndContext : BexprContext {
		[System.Diagnostics.DebuggerNonUserCode] public BexprContext[] bexpr() {
			return GetRuleContexts<BexprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BexprContext bexpr(int i) {
			return GetRuleContext<BexprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(BasicCParser.AND, 0); }
		public BexprAndContext(BexprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.EnterBexprAnd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.ExitBexprAnd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicCVisitor<TResult> typedVisitor = visitor as IBasicCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBexprAnd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BexprContext bexpr() {
		return bexpr(0);
	}

	private BexprContext bexpr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		BexprContext _localctx = new BexprContext(Context, _parentState);
		BexprContext _prevctx = _localctx;
		int _startState = 32;
		EnterRecursionRule(_localctx, 32, RULE_bexpr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 289;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				{
				_localctx = new BexprRelopContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 282;
				expr();
				State = 283;
				((BexprRelopContext)_localctx).RELOP = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 277076930199552L) != 0)) ) {
					((BexprRelopContext)_localctx).RELOP = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 284;
				expr();
				}
				break;
			case 2:
				{
				_localctx = new BexprExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 286;
				expr();
				}
				break;
			case 3:
				{
				_localctx = new BexprNotContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 287;
				Match(NOT);
				State = 288;
				bexpr(1);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 299;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 297;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
					case 1:
						{
						_localctx = new BexprAndContext(new BexprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_bexpr);
						State = 291;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 292;
						Match(AND);
						State = 293;
						bexpr(4);
						}
						break;
					case 2:
						{
						_localctx = new BexprOrContext(new BexprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_bexpr);
						State = 294;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 295;
						Match(OR);
						State = 296;
						bexpr(3);
						}
						break;
					}
					} 
				}
				State = 301;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ParamsContext : ParserRuleContext {
		public ParamsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_params; } }
	 
		public ParamsContext() { }
		public virtual void CopyFrom(ParamsContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class MultipleParamsContext : ParamsContext {
		public IToken TYPE;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(BasicCParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEP() { return GetToken(BasicCParser.SEP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParamsContext @params() {
			return GetRuleContext<ParamsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(BasicCParser.INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE() { return GetToken(BasicCParser.DOUBLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEAN() { return GetToken(BasicCParser.BOOLEAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(BasicCParser.STRING, 0); }
		public MultipleParamsContext(ParamsContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.EnterMultipleParams(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.ExitMultipleParams(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicCVisitor<TResult> typedVisitor = visitor as IBasicCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultipleParams(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NoneParamContext : ParamsContext {
		public NoneParamContext(ParamsContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.EnterNoneParam(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.ExitNoneParam(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicCVisitor<TResult> typedVisitor = visitor as IBasicCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNoneParam(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UniqueParamContext : ParamsContext {
		public IToken TYPE;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(BasicCParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(BasicCParser.INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE() { return GetToken(BasicCParser.DOUBLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEAN() { return GetToken(BasicCParser.BOOLEAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(BasicCParser.STRING, 0); }
		public UniqueParamContext(ParamsContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.EnterUniqueParam(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.ExitUniqueParam(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicCVisitor<TResult> typedVisitor = visitor as IBasicCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUniqueParam(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamsContext @params() {
		ParamsContext _localctx = new ParamsContext(Context, State);
		EnterRule(_localctx, 34, RULE_params);
		int _la;
		try {
			State = 309;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				_localctx = new UniqueParamContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 302;
				((UniqueParamContext)_localctx).TYPE = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 1006632960L) != 0)) ) {
					((UniqueParamContext)_localctx).TYPE = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 303;
				Match(VAR);
				}
				break;
			case 2:
				_localctx = new MultipleParamsContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 304;
				((MultipleParamsContext)_localctx).TYPE = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 1006632960L) != 0)) ) {
					((MultipleParamsContext)_localctx).TYPE = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 305;
				Match(VAR);
				State = 306;
				Match(SEP);
				State = 307;
				@params();
				}
				break;
			case 3:
				_localctx = new NoneParamContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamsCallContext : ParserRuleContext {
		public ParamsCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_paramsCall; } }
	 
		public ParamsCallContext() { }
		public virtual void CopyFrom(ParamsCallContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NoneParamCallContext : ParamsCallContext {
		public NoneParamCallContext(ParamsCallContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.EnterNoneParamCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.ExitNoneParamCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicCVisitor<TResult> typedVisitor = visitor as IBasicCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNoneParamCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultipleParamCallContext : ParamsCallContext {
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEP() { return GetToken(BasicCParser.SEP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParamsCallContext paramsCall() {
			return GetRuleContext<ParamsCallContext>(0);
		}
		public MultipleParamCallContext(ParamsCallContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.EnterMultipleParamCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.ExitMultipleParamCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicCVisitor<TResult> typedVisitor = visitor as IBasicCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultipleParamCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UniqueParamCallContext : ParamsCallContext {
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		public UniqueParamCallContext(ParamsCallContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.EnterUniqueParamCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.ExitUniqueParamCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicCVisitor<TResult> typedVisitor = visitor as IBasicCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUniqueParamCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamsCallContext paramsCall() {
		ParamsCallContext _localctx = new ParamsCallContext(Context, State);
		EnterRule(_localctx, 36, RULE_paramsCall);
		try {
			State = 317;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				_localctx = new UniqueParamCallContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 311;
				factor();
				}
				break;
			case 2:
				_localctx = new MultipleParamCallContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 312;
				factor();
				State = 313;
				Match(SEP);
				State = 314;
				paramsCall();
				}
				break;
			case 3:
				_localctx = new NoneParamCallContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallFunctionContext : ParserRuleContext {
		public CallFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_callFunction; } }
	 
		public CallFunctionContext() { }
		public virtual void CopyFrom(CallFunctionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FuncInvocContext : CallFunctionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(BasicCParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LP() { return GetToken(BasicCParser.LP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParamsCallContext paramsCall() {
			return GetRuleContext<ParamsCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RP() { return GetToken(BasicCParser.RP, 0); }
		public FuncInvocContext(CallFunctionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.EnterFuncInvoc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.ExitFuncInvoc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicCVisitor<TResult> typedVisitor = visitor as IBasicCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncInvoc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CallFunctionContext callFunction() {
		CallFunctionContext _localctx = new CallFunctionContext(Context, State);
		EnterRule(_localctx, 38, RULE_callFunction);
		try {
			_localctx = new FuncInvocContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 319;
			Match(VAR);
			State = 320;
			Match(LP);
			State = 321;
			paramsCall();
			State = 322;
			Match(RP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 16: return bexpr_sempred((BexprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool bexpr_sempred(BexprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 3);
		case 1: return Precpred(Context, 2);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,58,325,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,1,0,1,0,1,0,5,0,44,8,
		0,10,0,12,0,47,9,0,1,0,5,0,50,8,0,10,0,12,0,53,9,0,1,0,1,0,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,3,1,64,8,1,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,
		1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,86,8,3,1,4,1,4,1,4,1,4,1,4,1,4,
		1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,3,4,103,8,4,1,5,1,5,1,5,1,5,1,5,1,
		5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,
		1,5,1,5,3,5,130,8,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,143,
		8,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,
		7,1,7,4,7,163,8,7,11,7,12,7,164,1,7,1,7,1,7,1,7,1,7,3,7,172,8,7,1,8,1,
		8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,183,8,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,
		1,9,1,9,1,9,1,9,1,9,1,9,3,9,198,8,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,
		1,10,3,10,208,8,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,
		11,1,11,1,11,1,11,3,11,224,8,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,
		1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,
		1,12,1,12,3,12,250,8,12,1,13,1,13,4,13,254,8,13,11,13,12,13,255,1,13,1,
		13,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,
		15,1,15,1,15,1,15,1,15,1,15,1,15,3,15,280,8,15,1,16,1,16,1,16,1,16,1,16,
		1,16,1,16,1,16,3,16,290,8,16,1,16,1,16,1,16,1,16,1,16,1,16,5,16,298,8,
		16,10,16,12,16,301,9,16,1,17,1,17,1,17,1,17,1,17,1,17,1,17,3,17,310,8,
		17,1,18,1,18,1,18,1,18,1,18,1,18,3,18,318,8,18,1,19,1,19,1,19,1,19,1,19,
		1,19,0,1,32,20,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,
		0,3,1,0,26,29,1,0,26,27,1,0,42,47,352,0,40,1,0,0,0,2,63,1,0,0,0,4,65,1,
		0,0,0,6,85,1,0,0,0,8,102,1,0,0,0,10,129,1,0,0,0,12,142,1,0,0,0,14,171,
		1,0,0,0,16,182,1,0,0,0,18,197,1,0,0,0,20,207,1,0,0,0,22,223,1,0,0,0,24,
		249,1,0,0,0,26,251,1,0,0,0,28,259,1,0,0,0,30,279,1,0,0,0,32,289,1,0,0,
		0,34,309,1,0,0,0,36,317,1,0,0,0,38,319,1,0,0,0,40,41,5,3,0,0,41,45,5,1,
		0,0,42,44,3,2,1,0,43,42,1,0,0,0,44,47,1,0,0,0,45,43,1,0,0,0,45,46,1,0,
		0,0,46,51,1,0,0,0,47,45,1,0,0,0,48,50,3,6,3,0,49,48,1,0,0,0,50,53,1,0,
		0,0,51,49,1,0,0,0,51,52,1,0,0,0,52,54,1,0,0,0,53,51,1,0,0,0,54,55,3,4,
		2,0,55,1,1,0,0,0,56,57,5,3,0,0,57,58,5,43,0,0,58,59,5,54,0,0,59,64,5,44,
		0,0,60,61,5,2,0,0,61,62,5,54,0,0,62,64,3,16,8,0,63,56,1,0,0,0,63,60,1,
		0,0,0,64,3,1,0,0,0,65,66,5,26,0,0,66,67,5,4,0,0,67,68,5,38,0,0,68,69,5,
		39,0,0,69,70,3,28,14,0,70,5,1,0,0,0,71,72,7,0,0,0,72,73,5,54,0,0,73,74,
		5,38,0,0,74,75,3,34,17,0,75,76,5,39,0,0,76,77,3,28,14,0,77,86,1,0,0,0,
		78,79,5,30,0,0,79,80,5,54,0,0,80,81,5,38,0,0,81,82,3,34,17,0,82,83,5,39,
		0,0,83,84,3,28,14,0,84,86,1,0,0,0,85,71,1,0,0,0,85,78,1,0,0,0,86,7,1,0,
		0,0,87,88,3,10,5,0,88,89,5,19,0,0,89,103,1,0,0,0,90,91,3,12,6,0,91,92,
		5,19,0,0,92,103,1,0,0,0,93,94,3,14,7,0,94,95,5,19,0,0,95,103,1,0,0,0,96,
		103,3,22,11,0,97,103,3,24,12,0,98,103,3,6,3,0,99,100,3,38,19,0,100,101,
		5,19,0,0,101,103,1,0,0,0,102,87,1,0,0,0,102,90,1,0,0,0,102,93,1,0,0,0,
		102,96,1,0,0,0,102,97,1,0,0,0,102,98,1,0,0,0,102,99,1,0,0,0,103,9,1,0,
		0,0,104,105,5,54,0,0,105,106,5,36,0,0,106,130,5,55,0,0,107,108,5,29,0,
		0,108,109,5,54,0,0,109,110,5,36,0,0,110,130,5,55,0,0,111,112,7,1,0,0,112,
		113,5,54,0,0,113,114,5,36,0,0,114,130,3,16,8,0,115,116,7,1,0,0,116,117,
		5,54,0,0,117,118,5,36,0,0,118,130,3,38,19,0,119,120,5,28,0,0,120,121,5,
		54,0,0,121,122,5,36,0,0,122,130,5,52,0,0,123,124,5,54,0,0,124,125,5,36,
		0,0,125,130,3,16,8,0,126,127,5,54,0,0,127,128,5,36,0,0,128,130,5,52,0,
		0,129,104,1,0,0,0,129,107,1,0,0,0,129,111,1,0,0,0,129,115,1,0,0,0,129,
		119,1,0,0,0,129,123,1,0,0,0,129,126,1,0,0,0,130,11,1,0,0,0,131,132,5,21,
		0,0,132,133,5,38,0,0,133,134,5,22,0,0,134,135,5,37,0,0,135,136,5,23,0,
		0,136,137,5,54,0,0,137,143,5,39,0,0,138,139,5,24,0,0,139,140,5,38,0,0,
		140,141,5,54,0,0,141,143,5,39,0,0,142,131,1,0,0,0,142,138,1,0,0,0,143,
		13,1,0,0,0,144,145,5,20,0,0,145,146,5,38,0,0,146,147,5,55,0,0,147,172,
		5,39,0,0,148,149,5,20,0,0,149,150,5,38,0,0,150,151,5,54,0,0,151,172,5,
		39,0,0,152,153,5,20,0,0,153,154,5,38,0,0,154,155,3,16,8,0,155,156,5,39,
		0,0,156,172,1,0,0,0,157,158,5,20,0,0,158,159,5,38,0,0,159,162,5,55,0,0,
		160,161,5,37,0,0,161,163,5,54,0,0,162,160,1,0,0,0,163,164,1,0,0,0,164,
		162,1,0,0,0,164,165,1,0,0,0,165,166,1,0,0,0,166,172,5,39,0,0,167,168,5,
		25,0,0,168,169,5,38,0,0,169,170,5,54,0,0,170,172,5,39,0,0,171,144,1,0,
		0,0,171,148,1,0,0,0,171,152,1,0,0,0,171,157,1,0,0,0,171,167,1,0,0,0,172,
		15,1,0,0,0,173,174,3,18,9,0,174,175,5,31,0,0,175,176,3,16,8,0,176,183,
		1,0,0,0,177,178,3,18,9,0,178,179,5,32,0,0,179,180,3,16,8,0,180,183,1,0,
		0,0,181,183,3,18,9,0,182,173,1,0,0,0,182,177,1,0,0,0,182,181,1,0,0,0,183,
		17,1,0,0,0,184,185,3,20,10,0,185,186,5,34,0,0,186,187,3,18,9,0,187,198,
		1,0,0,0,188,189,3,20,10,0,189,190,5,33,0,0,190,191,3,18,9,0,191,198,1,
		0,0,0,192,193,3,20,10,0,193,194,5,35,0,0,194,195,3,18,9,0,195,198,1,0,
		0,0,196,198,3,20,10,0,197,184,1,0,0,0,197,188,1,0,0,0,197,192,1,0,0,0,
		197,196,1,0,0,0,198,19,1,0,0,0,199,200,5,38,0,0,200,201,3,16,8,0,201,202,
		5,39,0,0,202,208,1,0,0,0,203,208,5,54,0,0,204,208,5,51,0,0,205,208,5,53,
		0,0,206,208,5,55,0,0,207,199,1,0,0,0,207,203,1,0,0,0,207,204,1,0,0,0,207,
		205,1,0,0,0,207,206,1,0,0,0,208,21,1,0,0,0,209,210,5,13,0,0,210,211,5,
		38,0,0,211,212,3,32,16,0,212,213,5,39,0,0,213,214,3,26,13,0,214,224,1,
		0,0,0,215,216,5,13,0,0,216,217,5,38,0,0,217,218,3,32,16,0,218,219,5,39,
		0,0,219,220,3,26,13,0,220,221,5,14,0,0,221,222,3,26,13,0,222,224,1,0,0,
		0,223,209,1,0,0,0,223,215,1,0,0,0,224,23,1,0,0,0,225,226,5,6,0,0,226,227,
		5,38,0,0,227,228,3,32,16,0,228,229,5,39,0,0,229,230,3,26,13,0,230,250,
		1,0,0,0,231,232,5,7,0,0,232,233,5,38,0,0,233,234,3,10,5,0,234,235,5,19,
		0,0,235,236,3,32,16,0,236,237,5,19,0,0,237,238,3,10,5,0,238,239,5,39,0,
		0,239,240,3,26,13,0,240,250,1,0,0,0,241,242,5,5,0,0,242,243,3,26,13,0,
		243,244,5,6,0,0,244,245,5,38,0,0,245,246,3,32,16,0,246,247,5,39,0,0,247,
		248,5,19,0,0,248,250,1,0,0,0,249,225,1,0,0,0,249,231,1,0,0,0,249,241,1,
		0,0,0,250,25,1,0,0,0,251,253,5,40,0,0,252,254,3,8,4,0,253,252,1,0,0,0,
		254,255,1,0,0,0,255,253,1,0,0,0,255,256,1,0,0,0,256,257,1,0,0,0,257,258,
		5,41,0,0,258,27,1,0,0,0,259,260,5,40,0,0,260,261,3,30,15,0,261,262,5,41,
		0,0,262,29,1,0,0,0,263,280,3,8,4,0,264,265,3,8,4,0,265,266,3,30,15,0,266,
		280,1,0,0,0,267,268,5,8,0,0,268,269,5,52,0,0,269,280,5,19,0,0,270,271,
		5,8,0,0,271,272,5,55,0,0,272,280,5,19,0,0,273,274,5,8,0,0,274,275,3,16,
		8,0,275,276,5,19,0,0,276,280,1,0,0,0,277,278,5,8,0,0,278,280,5,19,0,0,
		279,263,1,0,0,0,279,264,1,0,0,0,279,267,1,0,0,0,279,270,1,0,0,0,279,273,
		1,0,0,0,279,277,1,0,0,0,280,31,1,0,0,0,281,282,6,16,-1,0,282,283,3,16,
		8,0,283,284,7,2,0,0,284,285,3,16,8,0,285,290,1,0,0,0,286,290,3,16,8,0,
		287,288,5,50,0,0,288,290,3,32,16,1,289,281,1,0,0,0,289,286,1,0,0,0,289,
		287,1,0,0,0,290,299,1,0,0,0,291,292,10,3,0,0,292,293,5,48,0,0,293,298,
		3,32,16,4,294,295,10,2,0,0,295,296,5,49,0,0,296,298,3,32,16,3,297,291,
		1,0,0,0,297,294,1,0,0,0,298,301,1,0,0,0,299,297,1,0,0,0,299,300,1,0,0,
		0,300,33,1,0,0,0,301,299,1,0,0,0,302,303,7,0,0,0,303,310,5,54,0,0,304,
		305,7,0,0,0,305,306,5,54,0,0,306,307,5,37,0,0,307,310,3,34,17,0,308,310,
		1,0,0,0,309,302,1,0,0,0,309,304,1,0,0,0,309,308,1,0,0,0,310,35,1,0,0,0,
		311,318,3,20,10,0,312,313,3,20,10,0,313,314,5,37,0,0,314,315,3,36,18,0,
		315,318,1,0,0,0,316,318,1,0,0,0,317,311,1,0,0,0,317,312,1,0,0,0,317,316,
		1,0,0,0,318,37,1,0,0,0,319,320,5,54,0,0,320,321,5,38,0,0,321,322,3,36,
		18,0,322,323,5,39,0,0,323,39,1,0,0,0,21,45,51,63,85,102,129,142,164,171,
		182,197,207,223,249,255,279,289,297,299,309,317
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
