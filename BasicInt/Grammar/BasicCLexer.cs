//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:/Users/marciohenrique/Downloads/uenp/TF_Compiladores-main/BasicC.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419


  namespace BasicInt.Grammar;

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class BasicCLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, DEFINE=2, INCLUDE=3, MAIN=4, DO=5, WHILE=6, FOR=7, RETURN=8, IMPORT=9, 
		STRUCT=10, UNION=11, TYPEOF=12, IF=13, ELSE=14, SWITCH=15, CASE=16, BREAK=17, 
		DEFAULT=18, EOL=19, PRINTF=20, SCANF=21, SCANF_FORMAT=22, AMPERSAND=23, 
		GETS=24, PUTS=25, INTEGER=26, DOUBLE=27, BOOLEAN=28, STRING=29, VOID=30, 
		SUM=31, SUB=32, DIV=33, MULT=34, MOD=35, ASSIGN=36, SEP=37, LP=38, RP=39, 
		LB=40, RB=41, LE=42, LT=43, GT=44, GE=45, EQ=46, NE=47, AND=48, OR=49, 
		NOT=50, NUMD=51, BOOL=52, NUM=53, VAR=54, STR=55, COMMENT=56, COMMENT_BLOCK=57, 
		WS=58;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "DEFINE", "INCLUDE", "MAIN", "DO", "WHILE", "FOR", "RETURN", "IMPORT", 
		"STRUCT", "UNION", "TYPEOF", "IF", "ELSE", "SWITCH", "CASE", "BREAK", 
		"DEFAULT", "EOL", "PRINTF", "SCANF", "SCANF_FORMAT", "AMPERSAND", "GETS", 
		"PUTS", "INTEGER", "DOUBLE", "BOOLEAN", "STRING", "VOID", "SUM", "SUB", 
		"DIV", "MULT", "MOD", "ASSIGN", "SEP", "LP", "RP", "LB", "RB", "LE", "LT", 
		"GT", "GE", "EQ", "NE", "AND", "OR", "NOT", "NUMD", "BOOL", "NUM", "VAR", 
		"STR", "COMMENT", "COMMENT_BLOCK", "WS"
	};


	public BasicCLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public BasicCLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'<stdio.h>'", "'#define'", "'#include'", "'main'", "'do'", "'while'", 
		"'for'", "'return'", "'#import'", "'struct'", "'union'", "'typeof'", "'if'", 
		"'else'", "'switch'", "'case'", "'break'", "'default'", "';'", "'printf'", 
		"'scanf'", null, "'&'", "'gets'", "'puts'", "'int'", "'double'", "'bool'", 
		"'str'", "'void'", "'+'", "'-'", "'/'", "'*'", "'%'", "'='", "','", "'('", 
		"')'", "'{'", "'}'", "'<='", "'<'", "'>'", "'>='", "'=='", "'!='", "'&&'", 
		"'||'", "'!'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, "DEFINE", "INCLUDE", "MAIN", "DO", "WHILE", "FOR", "RETURN", 
		"IMPORT", "STRUCT", "UNION", "TYPEOF", "IF", "ELSE", "SWITCH", "CASE", 
		"BREAK", "DEFAULT", "EOL", "PRINTF", "SCANF", "SCANF_FORMAT", "AMPERSAND", 
		"GETS", "PUTS", "INTEGER", "DOUBLE", "BOOLEAN", "STRING", "VOID", "SUM", 
		"SUB", "DIV", "MULT", "MOD", "ASSIGN", "SEP", "LP", "RP", "LB", "RB", 
		"LE", "LT", "GT", "GE", "EQ", "NE", "AND", "OR", "NOT", "NUMD", "BOOL", 
		"NUM", "VAR", "STR", "COMMENT", "COMMENT_BLOCK", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "BasicC.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static BasicCLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,58,420,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
		7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
		7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
		7,56,2,57,7,57,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,
		3,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,
		1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,
		9,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,12,
		1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,
		1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,
		1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,
		1,20,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,
		1,21,1,21,1,21,1,21,3,21,259,8,21,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,
		24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,
		26,1,26,1,27,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,
		29,1,29,1,30,1,30,1,31,1,31,1,32,1,32,1,33,1,33,1,34,1,34,1,35,1,35,1,
		36,1,36,1,37,1,37,1,38,1,38,1,39,1,39,1,40,1,40,1,41,1,41,1,41,1,42,1,
		42,1,43,1,43,1,44,1,44,1,44,1,45,1,45,1,45,1,46,1,46,1,46,1,47,1,47,1,
		47,1,48,1,48,1,48,1,49,1,49,1,50,4,50,345,8,50,11,50,12,50,346,1,50,1,
		50,4,50,351,8,50,11,50,12,50,352,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,
		51,1,51,3,51,364,8,51,1,52,4,52,367,8,52,11,52,12,52,368,1,53,1,53,5,53,
		373,8,53,10,53,12,53,376,9,53,1,54,1,54,1,54,1,54,5,54,382,8,54,10,54,
		12,54,385,9,54,1,54,1,54,1,55,1,55,1,55,1,55,5,55,393,8,55,10,55,12,55,
		396,9,55,1,55,1,55,1,56,1,56,1,56,1,56,5,56,404,8,56,10,56,12,56,407,9,
		56,1,56,1,56,1,56,1,56,1,56,1,57,4,57,415,8,57,11,57,12,57,416,1,57,1,
		57,1,405,0,58,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,
		25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,
		49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,
		73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,91,46,93,47,95,48,
		97,49,99,50,101,51,103,52,105,53,107,54,109,55,111,56,113,57,115,58,1,
		0,6,1,0,48,57,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,2,0,
		34,34,92,92,2,0,10,10,13,13,3,0,9,10,13,13,32,32,431,0,1,1,0,0,0,0,3,1,
		0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,
		15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,
		0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,
		0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,
		1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,
		0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,
		1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,
		0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,
		1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,
		0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,1,0,
		0,0,0,113,1,0,0,0,0,115,1,0,0,0,1,117,1,0,0,0,3,127,1,0,0,0,5,135,1,0,
		0,0,7,144,1,0,0,0,9,149,1,0,0,0,11,152,1,0,0,0,13,158,1,0,0,0,15,162,1,
		0,0,0,17,169,1,0,0,0,19,177,1,0,0,0,21,184,1,0,0,0,23,190,1,0,0,0,25,197,
		1,0,0,0,27,200,1,0,0,0,29,205,1,0,0,0,31,212,1,0,0,0,33,217,1,0,0,0,35,
		223,1,0,0,0,37,231,1,0,0,0,39,233,1,0,0,0,41,240,1,0,0,0,43,258,1,0,0,
		0,45,260,1,0,0,0,47,262,1,0,0,0,49,267,1,0,0,0,51,272,1,0,0,0,53,276,1,
		0,0,0,55,283,1,0,0,0,57,288,1,0,0,0,59,292,1,0,0,0,61,297,1,0,0,0,63,299,
		1,0,0,0,65,301,1,0,0,0,67,303,1,0,0,0,69,305,1,0,0,0,71,307,1,0,0,0,73,
		309,1,0,0,0,75,311,1,0,0,0,77,313,1,0,0,0,79,315,1,0,0,0,81,317,1,0,0,
		0,83,319,1,0,0,0,85,322,1,0,0,0,87,324,1,0,0,0,89,326,1,0,0,0,91,329,1,
		0,0,0,93,332,1,0,0,0,95,335,1,0,0,0,97,338,1,0,0,0,99,341,1,0,0,0,101,
		344,1,0,0,0,103,363,1,0,0,0,105,366,1,0,0,0,107,370,1,0,0,0,109,377,1,
		0,0,0,111,388,1,0,0,0,113,399,1,0,0,0,115,414,1,0,0,0,117,118,5,60,0,0,
		118,119,5,115,0,0,119,120,5,116,0,0,120,121,5,100,0,0,121,122,5,105,0,
		0,122,123,5,111,0,0,123,124,5,46,0,0,124,125,5,104,0,0,125,126,5,62,0,
		0,126,2,1,0,0,0,127,128,5,35,0,0,128,129,5,100,0,0,129,130,5,101,0,0,130,
		131,5,102,0,0,131,132,5,105,0,0,132,133,5,110,0,0,133,134,5,101,0,0,134,
		4,1,0,0,0,135,136,5,35,0,0,136,137,5,105,0,0,137,138,5,110,0,0,138,139,
		5,99,0,0,139,140,5,108,0,0,140,141,5,117,0,0,141,142,5,100,0,0,142,143,
		5,101,0,0,143,6,1,0,0,0,144,145,5,109,0,0,145,146,5,97,0,0,146,147,5,105,
		0,0,147,148,5,110,0,0,148,8,1,0,0,0,149,150,5,100,0,0,150,151,5,111,0,
		0,151,10,1,0,0,0,152,153,5,119,0,0,153,154,5,104,0,0,154,155,5,105,0,0,
		155,156,5,108,0,0,156,157,5,101,0,0,157,12,1,0,0,0,158,159,5,102,0,0,159,
		160,5,111,0,0,160,161,5,114,0,0,161,14,1,0,0,0,162,163,5,114,0,0,163,164,
		5,101,0,0,164,165,5,116,0,0,165,166,5,117,0,0,166,167,5,114,0,0,167,168,
		5,110,0,0,168,16,1,0,0,0,169,170,5,35,0,0,170,171,5,105,0,0,171,172,5,
		109,0,0,172,173,5,112,0,0,173,174,5,111,0,0,174,175,5,114,0,0,175,176,
		5,116,0,0,176,18,1,0,0,0,177,178,5,115,0,0,178,179,5,116,0,0,179,180,5,
		114,0,0,180,181,5,117,0,0,181,182,5,99,0,0,182,183,5,116,0,0,183,20,1,
		0,0,0,184,185,5,117,0,0,185,186,5,110,0,0,186,187,5,105,0,0,187,188,5,
		111,0,0,188,189,5,110,0,0,189,22,1,0,0,0,190,191,5,116,0,0,191,192,5,121,
		0,0,192,193,5,112,0,0,193,194,5,101,0,0,194,195,5,111,0,0,195,196,5,102,
		0,0,196,24,1,0,0,0,197,198,5,105,0,0,198,199,5,102,0,0,199,26,1,0,0,0,
		200,201,5,101,0,0,201,202,5,108,0,0,202,203,5,115,0,0,203,204,5,101,0,
		0,204,28,1,0,0,0,205,206,5,115,0,0,206,207,5,119,0,0,207,208,5,105,0,0,
		208,209,5,116,0,0,209,210,5,99,0,0,210,211,5,104,0,0,211,30,1,0,0,0,212,
		213,5,99,0,0,213,214,5,97,0,0,214,215,5,115,0,0,215,216,5,101,0,0,216,
		32,1,0,0,0,217,218,5,98,0,0,218,219,5,114,0,0,219,220,5,101,0,0,220,221,
		5,97,0,0,221,222,5,107,0,0,222,34,1,0,0,0,223,224,5,100,0,0,224,225,5,
		101,0,0,225,226,5,102,0,0,226,227,5,97,0,0,227,228,5,117,0,0,228,229,5,
		108,0,0,229,230,5,116,0,0,230,36,1,0,0,0,231,232,5,59,0,0,232,38,1,0,0,
		0,233,234,5,112,0,0,234,235,5,114,0,0,235,236,5,105,0,0,236,237,5,110,
		0,0,237,238,5,116,0,0,238,239,5,102,0,0,239,40,1,0,0,0,240,241,5,115,0,
		0,241,242,5,99,0,0,242,243,5,97,0,0,243,244,5,110,0,0,244,245,5,102,0,
		0,245,42,1,0,0,0,246,247,5,34,0,0,247,248,5,37,0,0,248,249,5,100,0,0,249,
		259,5,34,0,0,250,251,5,34,0,0,251,252,5,37,0,0,252,253,5,102,0,0,253,259,
		5,34,0,0,254,255,5,34,0,0,255,256,5,37,0,0,256,257,5,115,0,0,257,259,5,
		34,0,0,258,246,1,0,0,0,258,250,1,0,0,0,258,254,1,0,0,0,259,44,1,0,0,0,
		260,261,5,38,0,0,261,46,1,0,0,0,262,263,5,103,0,0,263,264,5,101,0,0,264,
		265,5,116,0,0,265,266,5,115,0,0,266,48,1,0,0,0,267,268,5,112,0,0,268,269,
		5,117,0,0,269,270,5,116,0,0,270,271,5,115,0,0,271,50,1,0,0,0,272,273,5,
		105,0,0,273,274,5,110,0,0,274,275,5,116,0,0,275,52,1,0,0,0,276,277,5,100,
		0,0,277,278,5,111,0,0,278,279,5,117,0,0,279,280,5,98,0,0,280,281,5,108,
		0,0,281,282,5,101,0,0,282,54,1,0,0,0,283,284,5,98,0,0,284,285,5,111,0,
		0,285,286,5,111,0,0,286,287,5,108,0,0,287,56,1,0,0,0,288,289,5,115,0,0,
		289,290,5,116,0,0,290,291,5,114,0,0,291,58,1,0,0,0,292,293,5,118,0,0,293,
		294,5,111,0,0,294,295,5,105,0,0,295,296,5,100,0,0,296,60,1,0,0,0,297,298,
		5,43,0,0,298,62,1,0,0,0,299,300,5,45,0,0,300,64,1,0,0,0,301,302,5,47,0,
		0,302,66,1,0,0,0,303,304,5,42,0,0,304,68,1,0,0,0,305,306,5,37,0,0,306,
		70,1,0,0,0,307,308,5,61,0,0,308,72,1,0,0,0,309,310,5,44,0,0,310,74,1,0,
		0,0,311,312,5,40,0,0,312,76,1,0,0,0,313,314,5,41,0,0,314,78,1,0,0,0,315,
		316,5,123,0,0,316,80,1,0,0,0,317,318,5,125,0,0,318,82,1,0,0,0,319,320,
		5,60,0,0,320,321,5,61,0,0,321,84,1,0,0,0,322,323,5,60,0,0,323,86,1,0,0,
		0,324,325,5,62,0,0,325,88,1,0,0,0,326,327,5,62,0,0,327,328,5,61,0,0,328,
		90,1,0,0,0,329,330,5,61,0,0,330,331,5,61,0,0,331,92,1,0,0,0,332,333,5,
		33,0,0,333,334,5,61,0,0,334,94,1,0,0,0,335,336,5,38,0,0,336,337,5,38,0,
		0,337,96,1,0,0,0,338,339,5,124,0,0,339,340,5,124,0,0,340,98,1,0,0,0,341,
		342,5,33,0,0,342,100,1,0,0,0,343,345,7,0,0,0,344,343,1,0,0,0,345,346,1,
		0,0,0,346,344,1,0,0,0,346,347,1,0,0,0,347,348,1,0,0,0,348,350,5,46,0,0,
		349,351,7,0,0,0,350,349,1,0,0,0,351,352,1,0,0,0,352,350,1,0,0,0,352,353,
		1,0,0,0,353,102,1,0,0,0,354,355,5,116,0,0,355,356,5,114,0,0,356,357,5,
		117,0,0,357,364,5,101,0,0,358,359,5,102,0,0,359,360,5,97,0,0,360,361,5,
		108,0,0,361,362,5,115,0,0,362,364,5,101,0,0,363,354,1,0,0,0,363,358,1,
		0,0,0,364,104,1,0,0,0,365,367,7,0,0,0,366,365,1,0,0,0,367,368,1,0,0,0,
		368,366,1,0,0,0,368,369,1,0,0,0,369,106,1,0,0,0,370,374,7,1,0,0,371,373,
		7,2,0,0,372,371,1,0,0,0,373,376,1,0,0,0,374,372,1,0,0,0,374,375,1,0,0,
		0,375,108,1,0,0,0,376,374,1,0,0,0,377,383,5,34,0,0,378,382,8,3,0,0,379,
		380,5,92,0,0,380,382,9,0,0,0,381,378,1,0,0,0,381,379,1,0,0,0,382,385,1,
		0,0,0,383,381,1,0,0,0,383,384,1,0,0,0,384,386,1,0,0,0,385,383,1,0,0,0,
		386,387,5,34,0,0,387,110,1,0,0,0,388,389,5,47,0,0,389,390,5,47,0,0,390,
		394,1,0,0,0,391,393,8,4,0,0,392,391,1,0,0,0,393,396,1,0,0,0,394,392,1,
		0,0,0,394,395,1,0,0,0,395,397,1,0,0,0,396,394,1,0,0,0,397,398,6,55,0,0,
		398,112,1,0,0,0,399,400,5,47,0,0,400,401,5,42,0,0,401,405,1,0,0,0,402,
		404,9,0,0,0,403,402,1,0,0,0,404,407,1,0,0,0,405,406,1,0,0,0,405,403,1,
		0,0,0,406,408,1,0,0,0,407,405,1,0,0,0,408,409,5,42,0,0,409,410,5,47,0,
		0,410,411,1,0,0,0,411,412,6,56,0,0,412,114,1,0,0,0,413,415,7,5,0,0,414,
		413,1,0,0,0,415,416,1,0,0,0,416,414,1,0,0,0,416,417,1,0,0,0,417,418,1,
		0,0,0,418,419,6,57,0,0,419,116,1,0,0,0,12,0,258,346,352,363,368,374,381,
		383,394,405,416,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
